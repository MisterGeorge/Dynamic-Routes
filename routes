#!/usr/bin/env php
<?php
/**
 * const BASEPATH system folder system
 */
define('BASEPATH', str_replace('\\', '/', 'system'));

/**
 * const APPPATH folder application
 */
define('APPPATH',  realpath('application') );

/**
 * const MYCORE_CONTROLLER_FILE + Extra controller file
 * include if someone extends from him (APPPATH core/MY_Controller)
 */
define('MYCORE_CONTROLLER_FILE' ,  APPPATH .'/core/MY_Controller.php' );


if( file_exists( APPPATH. '/config/routes-generator.php') )
{		
	$include_route = include_once APPPATH . '/config/routes-generator.php';
}
else
{	
	$include_route = [];
}

$directory_controller = APPPATH . '/controllers/';
$file_path 			  = APPPATH . '/config/routes-generator.php';

$GenerateRoutes = function() use ( $directory_controller ) {
	
	$pattern_routes_class  = '/@route::([a-zA-Z0-9\/\-\:\(\)\_]+)/';
	$pattern_routes_method = '/@route::({get}|{post}|{put}|{delete}|)([a-zA-Z0-9\/\-\:\(\)\_]+)/';
			
	require_once BASEPATH.'/core/Controller.php';
		
	if(file_exists(MYCORE_CONTROLLER_FILE))
	{
		require_once MYCORE_CONTROLLER_FILE;
	}
	
		
	$create_route = [];
	$files 		  = new RecursiveIteratorIterator( new RecursiveDirectoryIterator( $directory_controller ));

	foreach ($files as $file)
	{
		
		$file_info = pathinfo( $file );
		
		if(!isset($file_info['extension']) || $file_info['extension']!='php')
		{
			continue;
		}

		require_once $file;		
				
		$controller_file = str_replace($directory_controller, "" ,$file_info['dirname'] .'/'.  $file_info['filename'] );
		
		$reflection_clas = new ReflectionClass( $file_info['filename'] );
		$docs_class      = $reflection_clas->getDocComment();
		$methods         = $reflection_clas->getMethods(ReflectionMethod::IS_PUBLIC);
		
		
		if(preg_match_all($pattern_routes_class, $docs_class , $matches_class) > 0 )
		{
			$route_controller = $matches_class[1][0].'/';
		}
		else
		{
			$route_controller = '';//strtolower( $file_info['filename'] );
		}

		foreach ($methods as $reflection) 
		{
			$route_action = strtolower( $reflection->name );
			$name_param   = $reflection->name.'/';

			if ( substr( $reflection->name, 0, 1 ) === '_' ||  $reflection->name === 'get_instance')
			{
				continue;		
			}

			$reflection_method = new ReflectionMethod( $file_info['filename'] ,  $reflection->name );
			$docs_method       = $reflection_method->getDocComment();
			
			$aux_param = array();
			foreach ($reflection_method->getParameters() as $num => $value) 
			{
				$name_param.= '$'. ($num + 1).'/';
			}
			
			$controller_action_path =  $controller_file. '/' .$name_param;

			if (preg_match_all( $pattern_routes_method , $docs_method, $matches ) > 0 ) 
			{		
				$matches_method_tmp = $matches[1];
				$matches_url_tmp 	= $matches[2];
				foreach ($matches_url_tmp as $key => $value) 
				{
					$type_method = isset($matches_method_tmp[$key]) ? str_replace(['{','}'], '', $matches_method_tmp[$key]) : '';
					
					if($value === '__avoid__' && $route_controller != '')
					{	
						if($type_method==='')
						{
							$create_route[ substr($route_controller,0,-1) ] = $controller_action_path;
						}
						else 
						{
							$create_route[ substr($route_controller,0,-1) ][$type_method] = $controller_action_path;
						}
					}
					else
					{	
						if($type_method==='')
						{
							$create_route[ $route_controller.$value ] = $controller_action_path;
						}
						else
						{
							$create_route[ $route_controller.$value ][$type_method] = $controller_action_path;
						}
					}

				}
			}else
			{
				$create_route[ $route_controller.$route_action ] = $controller_action_path;
			}	
				
		}
	}
	ksort($create_route);	
	return $create_route;
};


$add_routes_generator = $GenerateRoutes();

/**
 * get if exist before in file generator
 */
$routes_news   = routes_not_found($add_routes_generator, $include_route );

/**
 * get removed or change
 */
//$routes_remove = routes_not_found($include_route , $add_routes_generator );


$replace_content = print_r($add_routes_generator, 1 ).";";
$replace_content = str_replace("[",'"',$replace_content);
$replace_content = str_replace("]",'"',$replace_content);
$replace_content = str_replace("=> Array",'=>Array',$replace_content);
$replace_content = str_replace("=> ",'=> "',$replace_content);
$replace_content = str_replace("/\n","/\",\n",$replace_content);
$replace_content = str_replace(")\n\n","),\n",$replace_content);

$content = "<?php \nreturn ";
$content.= $replace_content;

if( $fp = fopen( $file_path, 'w') )
{
	fputs($fp, $content );
    fclose($fp);
    chmod($file_path,  0765);
}

$str_ouput = "";

if(count($routes_news) > 0)
{
	$str_ouput.= "\033[1;32m";
	$str_ouput.= "Routes news (".count($routes_news).") \n";
	$str_ouput.= "\033[0m";
	foreach ($routes_news as $value) {
		$str_ouput.= "\033[0;32m";
		$str_ouput.= "\t".str_pad($value['url'].' ', 56,'.')." ";
		$str_ouput.= "\033[0m";
		$str_ouput.= "\033[0;36m";
		$str_ouput.= $value['path']."\n";
		$str_ouput.= "\033[0m";
	}
}
/*
if(count($routes_remove) > 0)
{
	$str_ouput.= "\033[1;33m";
	$str_ouput.= "Routes remove or changed (".count($routes_remove).") \n";
	$str_ouput.= "\033[0m";
	foreach ($routes_remove as $value) {
		$str_ouput.= "\033[0;33m";
		$str_ouput.= "\t".$value['url']."\t";
		$str_ouput.= "\033[0m";
		$str_ouput.= "\033[0;36m";
		$str_ouput.= "\t".$value['path']."\n";
		$str_ouput.= "\033[0m";
	}
}
*/

echo $str_ouput;

function routes_not_found($routes_x = null, $routes_y = null)
{	
	$routes_not_found = [];
	$routes_x         = is_array($routes_x) ? $routes_x : [];
	$routes_y         = is_array($routes_y) ? $routes_y : [];
	$keys_tmp         = array_keys( $routes_y );

	foreach ($routes_x as $firstKey => $firstValue) {
		
		if(is_array($firstValue) )
		{
			foreach ($firstValue as $secondKey => $secondValue) {
				$compare = isset($routes_y[$firstKey][$secondKey]) ? $routes_y[$firstKey][$secondKey] : '';
				if($compare !=  $routes_x[$firstKey][$secondKey])
				{	
					$routes_not_found[] = [
						'url' => "{".$secondKey."}".$firstKey,
						'path' => $routes_x[$firstKey][$secondKey]
					];
				}
			}
		}
		else if(!in_array($firstKey,  $keys_tmp) )
		{	
			$routes_not_found[] = [
				'url' => $firstKey,
				'path' => $routes_x[$firstKey]
			];
		}
	}

	return $routes_not_found;
}